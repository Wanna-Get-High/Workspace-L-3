
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 06 10:59:04 CEST 2011
//----------------------------------------------------

package init.analyseurs;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 06 10:59:04 CEST 2011
  */
public class ParserInit extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserInit() {super();}

  /** Constructor which sets the default scanner. */
  public ParserInit(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserInit(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\002\000\002\004\004\000\002\005\005" +
    "\000\002\006\003\000\002\006\005\000\002\007\002\000" +
    "\002\007\004\000\002\010\003\000\002\010\003\000\002" +
    "\011\006\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\004\004\005\001\002\000\004\002\036\001" +
    "\002\000\004\007\034\001\002\000\012\002\ufffe\005\010" +
    "\006\ufffe\007\ufffe\001\002\000\012\002\ufffe\005\010\006" +
    "\ufffe\007\ufffe\001\002\000\004\007\027\001\002\000\010" +
    "\002\ufff9\006\014\007\016\001\002\000\004\002\000\001" +
    "\002\000\010\002\ufff9\006\014\007\016\001\002\000\004" +
    "\007\023\001\002\000\010\002\ufff6\006\ufff6\007\ufff6\001" +
    "\002\000\004\011\020\001\002\000\010\002\ufff7\006\ufff7" +
    "\007\ufff7\001\002\000\004\010\021\001\002\000\004\012" +
    "\022\001\002\000\010\002\ufff5\006\ufff5\007\ufff5\001\002" +
    "\000\004\012\024\001\002\000\010\002\ufff4\006\ufff4\007" +
    "\ufff4\001\002\000\004\002\ufff8\001\002\000\004\012\032" +
    "\001\002\000\006\012\ufffb\013\030\001\002\000\004\007" +
    "\027\001\002\000\004\012\ufffa\001\002\000\012\002\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\001\002\000\010\002\ufffd\006" +
    "\ufffd\007\ufffd\001\002\000\004\012\035\001\002\000\012" +
    "\002\uffff\005\uffff\006\uffff\007\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\010\005\006\001\001" +
    "\000\006\004\032\005\006\001\001\000\004\006\025\001" +
    "\001\000\012\007\011\010\012\011\016\012\014\001\001" +
    "\000\002\001\001\000\012\007\024\010\012\011\016\012" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserInit$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserInit$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserInit$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	private boolean erreurSyntaxique;
	private String messageErreur;

	/** Red�finition de la m�thode parse() pour lev�e de 
	  * ParserException() en cas d'erreur syntaxique.
	  * @throws ParserException en cas d'erreur syntaxique.
	  */ 
	public Symbol parse() throws Exception, ParserException 
	{
		Symbol s = null;
		try {    
			s = super.parse();
		} 
		catch (Exception e) 
		{
			if (this.erreurSyntaxique)
				throw new ParserException(this.messageErreur); 
			else 
				throw e;
		}
		return s;
	} 

	/** Red�finition de syntax_error() pour qu'elle affiche
	  * le symbole courant.
	  */
	public void syntax_error(Symbol symboleCourant) 
	{
		this.erreurSyntaxique = true;
		this.messageErreur = "erreur syntaxique sur le symbole " 
				+ ((Symbole)symboleCourant).getRepresentationTextuelle() 
				+ " ligne " + (symboleCourant.left + 1) 
				+ " colonne " + (symboleCourant.right + 1);
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserInit$actions {
  private final ParserInit parser;

  /** Constructor */
  CUP$ParserInit$actions(ParserInit parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserInit$do_action(
    int                        CUP$ParserInit$act_num,
    java_cup.runtime.lr_parser CUP$ParserInit$parser,
    java.util.Stack            CUP$ParserInit$stack,
    int                        CUP$ParserInit$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserInit$result;

      /* select the action based on the action number */
      switch (CUP$ParserInit$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lect ::= READ IDENT FININSTR 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("lect",8, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // affect ::= IDENT AFF ENTIER FININSTR 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("affect",7, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instr ::= lect 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instr ::= affect 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("instr",6, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listeInstr ::= instr listeInstr 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("listeInstr",5, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listeInstr ::= 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("listeInstr",5, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listeIdent ::= IDENT SEPVAR listeIdent 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("listeIdent",4, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listeIdent ::= IDENT 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("listeIdent",4, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= DECLINT listeIdent FININSTR 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listeDecl ::= decl listeDecl 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("listeDecl",2, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listeDecl ::= 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("listeDecl",2, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entete ::= PROG IDENT FININSTR 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("entete",1, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programme ::= entete listeDecl listeInstr 
            {
              Object RESULT =null;

              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("programme",0, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          return CUP$ParserInit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programme EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-1)).value;
		RESULT = start_val;
              CUP$ParserInit$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserInit$stack.elementAt(CUP$ParserInit$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInit$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserInit$parser.done_parsing();
          return CUP$ParserInit$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

