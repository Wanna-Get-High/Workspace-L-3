/*****************************************************
 * Description pour Cup d'une grammaire pour Init
 * attribuée : contrôle de type 
 *
 * 16/12/04 - revu 09/09 
 * M. Nebut
 *
 *****************************************************/

package init.analyseurs;

import java_cup.runtime.*;
import init.controleType.*;
import java.util.ArrayList;

action code {:
private TableSymboles tableSymboles;
:}

parser code {: 

private boolean erreurSyntaxique;
private String messageErreur;

/** Redéfinition de la méthode parse() pour levée de 
  * ParserException() en cas d'erreur syntaxique.
  * @throws ParserException en cas d'erreur syntaxique.
  */ 
public Symbol parse() throws Exception, ParserException {
   Symbol s = null;
   try {    
     s = super.parse();
   } catch (Exception e) {
   	   if (this.erreurSyntaxique)
     	      throw new ParserException(this.messageErreur); 
           else throw e;
   }
   return s;
} 

/** Redéfinition de syntax_error() pour qu'elle affiche
  * le symbole courant.
  */
public void syntax_error(Symbol symboleCourant) {
    this.erreurSyntaxique = true;
    this.messageErreur = "erreur syntaxique sur le symbole " 
    + ((Symbole)symboleCourant).getRepresentationTextuelle() 
    + " ligne " + (symboleCourant.left + 1) 
    + " colonne " + (symboleCourant.right + 1);
}

:} // parser code


/* terminaux (symboles retournés par l'analyseur lexical) */

terminal String IDENT;
terminal PROG,DECLINT,READ,ENTIER,AFF,FININSTR;
terminal SEPVAR, DEBUT_LISTE, FIN_LISTE, DECLLIST;

/* non-terminaux de la grammaire */

non terminal ArrayList<String> listeIdent;
non terminal programme,entete,listeDecl,decl, listeInstr;
non terminal instr,affect,lect, liste, contenuListe;

start with programme; /* axiome */

/* la grammaire */

programme ::= entete listeDecl listeInstr {:
    System.out.println("*********\n" + this.tableSymboles);
:}

;

entete ::= PROG IDENT:nom FININSTR {:
   this.tableSymboles = new TableSymboles();
   this.tableSymboles.ajoutIdentificateur(nom, Type.PROGRAMME);  
:}
;

listeDecl ::= 
            | decl listeDecl 
;

decl ::= DECLINT listeIdent:liste FININSTR {:
    for (String nom : liste) {
    	if (this.tableSymboles.contientIdentificateur(nom))
	    throw new TypeCheckingException("double declaration de " + nom);
    	this.tableSymboles.ajoutIdentificateur(nom, Type.ENTIER); 
    }
:}
      | DECLLIST listeIdent:liste FININSTR {:
    for (String nom : liste) {
    	if (this.tableSymboles.contientIdentificateur(nom))
	    throw new TypeCheckingException("double declaration de " + nom);
    	this.tableSymboles.ajoutIdentificateur(nom, Type.LISTE); 
    } 
:}
;

listeIdent ::= IDENT:nom {:
   RESULT = new ArrayList<String>();
   RESULT.add(nom);
:}
             | IDENT:nom SEPVAR listeIdent:liste {:
   RESULT = liste;
   RESULT.add(nom);
:}

;

listeInstr ::= 
             | instr listeInstr
; 

instr ::= affect
        | lect
;

affect ::= IDENT:nom AFF ENTIER FININSTR {:
       if (! this.tableSymboles.contientIdentificateur(nom))
          throw new TypeCheckingException(nom + " pas déclaré");
       if (this.tableSymboles.getTypeIdentificateur(nom) != Type.ENTIER)
       	  throw new TypeCheckingException(nom + " pas de type ENTIER");	
:}
         | IDENT:nom AFF liste FININSTR {:
       if (! this.tableSymboles.contientIdentificateur(nom))
          throw new TypeCheckingException(nom + " pas déclaré");
       if (this.tableSymboles.getTypeIdentificateur(nom) != Type.LISTE)
       	  throw new TypeCheckingException(nom + " pas de type LISTE");	
:}
;

liste ::= DEBUT_LISTE contenuListe FIN_LISTE
;

contenuListe ::= | ENTIER contenuListe | liste contenuListe
;

lect ::= READ IDENT:nom FININSTR {:
       if (! this.tableSymboles.contientIdentificateur(nom))
          throw new TypeCheckingException(nom + " pas déclaré");
       if (this.tableSymboles.getTypeIdentificateur(nom) != Type.ENTIER)
       	  throw new TypeCheckingException(nom + " pas de type ENTIER");	
:}
;
