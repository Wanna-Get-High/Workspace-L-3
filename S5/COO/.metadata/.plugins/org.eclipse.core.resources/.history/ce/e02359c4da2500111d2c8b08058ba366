package editor;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JTextArea;

import application.extensions.PluginChecker;
import application.extensions.PluginEvent;
import application.extensions.PluginListener;

/**
 * The Class Editor.
 */
public class Editor
{
	
	/** The frame. */
	protected JFrame frame;
	
	/** The text area. */
	protected JTextArea text;
	
	/** The menu bar. */
	protected JMenuBar menuBar;
	
	/** The plug-ins. */
	protected JMenu plugins;
	
	/** The checker. */
	protected PluginChecker checker;
	
	/**
	 * Instantiates a new editor.
	 *
	 * @param dir the directory
	 */
	public Editor(String dir)
	{
		this.checker = new PluginChecker(500, dir);
		this.checker.addPluginListener(new OutilsListener());
		
		this.frame = new JFrame("Plugin");
		this.menuBar = new JMenuBar();
		this.plugins = new JMenu("Plugin");
		this.menuBar.add(this.plugins);
		
		this.text  = new JTextArea(20,40);	
		
		this.frame.setJMenuBar(this.menuBar);
		this.frame.add(this.text);
		
		this.checker.createChecker();
		
		this.frame.pack();
		this.frame.setVisible(true);
		this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
	}
	
	/**
	 * subClasse.
	 *
	 * @author Francois Lepan
	 */
	class OutilsListener implements PluginListener
	{
		int i = 0;
		
		/** The items of the JMenu. */
		List<JMenuItem> items = new ArrayList<JMenuItem>();
		
		@Override
		public void pluginAdded(final PluginEvent e) 
		{
			this.items.add(new JMenuItem(e.getExtension().toString()));
			Editor.this.plugins.add(this.items.get(i));
			
			// we add to the JMenuItem the action Listener of the plug-in
			this.items.get(i).addActionListener(new ActionListener(){
													@Override
													public void actionPerformed(ActionEvent arg0) {
														Editor.this.text.setText(e.getExtension().transformer(Editor.this.text.getText()));
													}
												});
			i++;
		}
		
		@Override
		public void pluginRemoved(PluginEvent e)
		{
			Editor.this.plugins.remove(this.items.get(i-1));
			this.items.remove(this.items.get(i));
			i--;
		}
	}
	
	/**
	 * The main method.
	 *
	 * @param args the arguments (directory you want to use)
	 */
	public static void main(String[] args) 
	{
		new Editor(args[0]);
	}
}