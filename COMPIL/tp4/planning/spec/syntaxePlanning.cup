/*****************************************************
 * Description pour Cup d'une grammaire vide
 * Sert uniquement à définir les symboles de Planning
 *
 * M. Lepan & M. Van Ryseghem 
 * 2011/10/05
 *
 *****************************************************/

package planningMaster.analyseurs;
import java_cup.runtime.*;
import java.io.*;


action code {:
	private EcritureTexteFlot file;
:}

parser code {: 

	private boolean erreurSyntaxique;
	private String messageErreur;
	
	/** Redéfinition de la méthode parse() pour levée de 
	  * ParserException() en cas d'erreur syntaxique.
	  * @throws ParserException en cas d'erreur syntaxique.
	  */
	
	public Symbol parse() throws Exception, ParserException 
	{
		Symbol s = null;
		try {    
			s = super.parse();
		} 
		catch (Exception e) 
		{
			if (this.erreurSyntaxique)
				throw new ParserException(this.messageErreur); 
			else 
				throw e;
		}
		return s;
	} 

	/** Redéfinition de syntax_error() pour qu'elle affiche
	  * le symbole courant.
	  */
	public void syntax_error(Symbol symboleCourant) 
	{
		this.erreurSyntaxique = true;
		this.messageErreur = "erreur syntaxique sur le symbole " 
				+ ((Symbole)symboleCourant).getRepresentationTextuelle() 
				+ " ligne " + (symboleCourant.left + 1) 
				+ " colonne " + (symboleCourant.right + 1);
	}
	
:} // parser code
	
/* terminaux (symboles retournés par l'analyseur lexical) */

terminal DATECST,MASTERCST,ROOMCST,PETITEPAUSE,GRANDEPAUSE;
terminal SLOT,DATE, NAME,ENTREPRISE;
terminal ROOM,MASTER,OPTIONS,SEPARATOR;

/* non-terminaux de la grammaire */

non terminal salle, date, entry, master, petitePause, grandePause, file;
non terminal String data;

/* axiome */
start with file;

/* la grammaire */

file ::= 
		| master:mast date:date salle:sal data:data file
		{:
			/** .tex file */
			EcritureTexteFlot file = new EcritureTexteFlot(new java.io.FileOutputStream(mast+"_"+date+"_"+sal+".tex"));
			file.ecrire(ConstantesLatex.DEBUT_DOCUMENT);
			file.ecrire(ConstantesLatex.DEBUT_COMMANDE_MASTER + mast + ConstantesLatex.FIN_COMMANDE);
			file.ecrire(ConstantesLatex.DEBUT_COMMANDE_DATE + date + ConstantesLatex.FIN_COMMANDE);
			file.ecrire(ConstantesLatex.DEBUT_COMMANDE_SALLE + sal + ConstantesLatex.FIN_COMMANDE);
			file.ecrire(ConstantesLatex.DEFINITION_TITRE);
			file.ecrire(ConstantesLatex.DEBUT_TABLEAU);
			file.ecrire(data);
			file.ecrire(ConstantesLatex.FIN_TABLEAU);
			file.ecrire(ConstantesLatex.FIN_DOCUMENT);
			file.terminer();
		:}
;

data ::= 
		| entry:ent data:data
		{:
			RESULT = (String)ent;
			if (data != null)
				RESULT+= (String)data;
		:}
		| petitePause:pp data:data
		{:
			RESULT = (String)pp;
			if (data != null)
				RESULT+= (String)data;
		:}
		| grandePause:gp data:data
		{:
			RESULT = (String)gp;
			if (data != null)
				RESULT+= (String)data;
		:}
;

salle ::= ROOMCST ROOM:room
		{:
			RESULT = room;
		:}
;

master ::= MASTERCST MASTER:master
		{:
			RESULT = master;
		:}
;

date ::= DATECST DATE:date
		{:
			RESULT = date;
		:}
;

entry ::= SLOT:slot SEPARATOR NAME:name SEPARATOR ENTREPRISE:ent SEPARATOR OPTIONS:opt
		{:
			RESULT = slot + ConstantesLatex.SEPARATEUR_CASE + name + ConstantesLatex.SEPARATEUR_CASE
					+ ent + ConstantesLatex.SEPARATEUR_CASE + opt + ConstantesLatex.FIN_LIGNE_TABLEAU;
		:}

;

petitePause ::= PETITEPAUSE:pp
			{:
				RESULT = ConstantesLatex.PETITE_PAUSE;
			:}
;

grandePause ::= GRANDEPAUSE:gp
			{:
				RESULT = ConstantesLatex.GRANDE_PAUSE;
			:}
;







